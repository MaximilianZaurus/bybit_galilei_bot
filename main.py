import os
from fastapi import FastAPI, Request
from dotenv import load_dotenv

import logging
import sys
import traceback
from datetime import datetime

from bot import telegram_app              # –û–±—ä–µ–∫—Ç Application –æ—Ç python-telegram-bot
from scheduler import start_scheduler     # –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —Ñ–æ–Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á (analyze_and_send)

load_dotenv()

BOT_TOKEN = os.getenv("BOT_TOKEN")
if not BOT_TOKEN:
    raise RuntimeError("BOT_TOKEN is not set in environment variables")

app = FastAPI()


@app.on_event("startup")
async def on_startup():
    try:
        now = datetime.utcnow().strftime('%Y-%m-%d %H:%M:%S')
        await send_message(f"üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –≤ {now} UTC. –ü–µ—Ä–≤—ã–π –∞–Ω–∞–ª–∏–∑ –±—É–¥–µ—Ç —á–µ—Ä–µ–∑ 15 –º–∏–Ω—É—Ç.")
        logger.info("Startup message sent")

        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
        start_scheduler()

        logger.info("Scheduler started")
    except Exception as e:
        logger.error(f"Error on startup: {e}")
        traceback.print_exc(file=sys.stdout)

@app.post(f"/webhook/{BOT_TOKEN}")
async def telegram_webhook(req: Request):
    try:
        update = await req.json()
        # –í python-telegram-bot v20+ –º–µ—Ç–æ–¥ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è `process_update` –∏–ª–∏ `update_queue.put` 
        # –ù–æ –µ—Å–ª–∏ telegram_app ‚Äî –≤–∞—à –æ–±—ë—Ä—Ç–∫–∞, –æ—Å—Ç–∞–≤–ª—è–µ–º await telegram_app.update(update)
        await telegram_app.update(update)
        return {"status": "ok"}
    except Exception as e:
        return {"status": "error", "message": str(e)}


@app.get("/")
def read_root():
    return {"status": "Galilei bot running"}
