import os
import sys
import traceback
import logging
from datetime import datetime

from fastapi import FastAPI, Request
from dotenv import load_dotenv

from bot import telegram_app, send_message          # ‚úÖ –¥–æ–±–∞–≤–ª–µ–Ω send_message
from scheduler import start_scheduler               # ‚úÖ –≤–∞—à –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫

# ‚úÖ –õ–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# ‚úÖ –ó–∞–≥—Ä—É–∑–∫–∞ .env
load_dotenv()

BOT_TOKEN = os.getenv("BOT_TOKEN")
if not BOT_TOKEN:
    raise RuntimeError("BOT_TOKEN is not set in environment variables")

# ‚úÖ FastAPI app
app = FastAPI()

# ‚úÖ Startup —Å–æ–±—ã—Ç–∏–µ
@app.on_event("startup")
async def on_startup():
    try:
        now = datetime.utcnow().strftime('%Y-%m-%d %H:%M:%S')
        await send_message(f"üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –≤ {now} UTC. –ü–µ—Ä–≤—ã–π –∞–Ω–∞–ª–∏–∑ –±—É–¥–µ—Ç —á–µ—Ä–µ–∑ 15 –º–∏–Ω—É—Ç.")
        logger.info("Startup message sent")

        start_scheduler()
        logger.info("Scheduler started")
    except Exception as e:
        logger.error(f"Error on startup: {e}")
        traceback.print_exc(file=sys.stdout)

# ‚úÖ Webhook –¥–ª—è Telegram
@app.post(f"/webhook/{BOT_TOKEN}")
async def telegram_webhook(req: Request):
    try:
        update = await req.json()
        await telegram_app.update(update)  # –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ telegram_app —Ä–µ–∞–ª–∏–∑—É–µ—Ç .update
        return {"status": "ok"}
    except Exception as e:
        logger.error(f"Webhook error: {e}")
        return {"status": "error", "message": str(e)}

# ‚úÖ –ü—Ä–æ—Å—Ç–æ–π GET
@app.get("/")
def read_root():
    return {"status": "Galilei bot running"}
