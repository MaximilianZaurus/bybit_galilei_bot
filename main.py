import os
import sys
import traceback
import logging
from datetime import datetime
import asyncio

from fastapi import FastAPI, Request
from dotenv import load_dotenv

from bot import telegram_app, send_message          # ‚úÖ –¥–æ–±–∞–≤–ª–µ–Ω send_message
from scheduler import start_scheduler               # ‚úÖ –≤–∞—à –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫

# –ò–º–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∏ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–∏–∫–µ—Ä–æ–≤
from weekly_analysis import analyze_week, load_tickers

# ‚úÖ –õ–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# ‚úÖ –ó–∞–≥—Ä—É–∑–∫–∞ .env
load_dotenv()

BOT_TOKEN = os.getenv("BOT_TOKEN")
if not BOT_TOKEN:
    raise RuntimeError("BOT_TOKEN is not set in environment variables")

# ‚úÖ FastAPI app
app = FastAPI()

async def analyze_and_report():
    tickers = load_tickers()
    messages = []
    for ticker in tickers:
        try:
            # analyze_week ‚Äî —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è, –∑–∞–ø—É—Å–∫–∞–µ–º –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
            await asyncio.to_thread(analyze_week, ticker)
            messages.append(f"‚úÖ –ê–Ω–∞–ª–∏–∑ –ø–æ {ticker} –≤—ã–ø–æ–ª–Ω–µ–Ω.")
        except Exception as e:
            messages.append(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ {ticker}: {e}")
    report = "üöÄ –°—Ç–∞—Ä—Ç–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑:\n" + "\n".join(messages)
    await send_message(report)

# ‚úÖ Startup —Å–æ–±—ã—Ç–∏–µ
@app.on_event("startup")
async def on_startup():
    try:
        now = datetime.utcnow().strftime('%Y-%m-%d %H:%M:%S')
        await send_message(f"üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –≤ {now} UTC. –ó–∞–ø—É—Å–∫–∞–µ–º —Å—Ç–∞—Ä—Ç–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑.")
        logger.info("Startup message sent")

        await analyze_and_report()

        start_scheduler()
        logger.info("Scheduler started")
    except Exception as e:
        logger.error(f"Error on startup: {e}")
        traceback.print_exc(file=sys.stdout)

# ‚úÖ Webhook –¥–ª—è Telegram
@app.post(f"/webhook/{BOT_TOKEN}")
async def telegram_webhook(req: Request):
    try:
        update = await req.json()
        await telegram_app.update(update)  # –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ telegram_app —Ä–µ–∞–ª–∏–∑—É–µ—Ç .update
        return {"status": "ok"}
    except Exception as e:
        logger.error(f"Webhook error: {e}")
        return {"status": "error", "message": str(e)}

# ‚úÖ –ü—Ä–æ—Å—Ç–æ–π GET
@app.get("/")
def read_root():
    return {"status": "Galilei bot running"}
