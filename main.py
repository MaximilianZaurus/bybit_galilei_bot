import os
import sys
import traceback
import logging
from datetime import datetime
import asyncio

from fastapi import FastAPI, Request
from dotenv import load_dotenv

from bot import telegram_app, send_message          # ‚úÖ –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
from scheduler import start_scheduler               # ‚úÖ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫

from weekly_analysis import analyze_week            # ‚úÖ –∞–Ω–∞–ª–∏–∑ –Ω–µ–¥–µ–ª–∏

# ‚úÖ –õ–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# ‚úÖ –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
if not BOT_TOKEN:
    raise RuntimeError("BOT_TOKEN is not set in environment variables")

# ‚úÖ FastAPI
app = FastAPI()

# ‚úÖ –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∑–∞–ø—É—Å–∫ –Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
async def analyze_and_report():
    try:
        message = await asyncio.to_thread(analyze_week)  # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞
        await send_message(message)                       # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ —Ç–µ–ª–µ–≥—É –ø–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç
        logger.info("–ù–µ–¥–µ–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")
    except Exception as e:
        error_msg = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–µ–¥–µ–ª—å–Ω–æ–º –∞–Ω–∞–ª–∏–∑–µ: {e}"
        logger.error(error_msg)
        await send_message(error_msg)

# ‚úÖ –°–æ–±—ã—Ç–∏–µ –∑–∞–ø—É—Å–∫–∞ FastAPI
@app.on_event("startup")
async def on_startup():
    try:
        now = datetime.utcnow().strftime('%Y-%m-%d %H:%M:%S')
        await send_message(f"üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –≤ {now} UTC. –ó–∞–ø—É—Å–∫–∞–µ–º —Å—Ç–∞—Ä—Ç–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑.")
        logger.info("Startup message sent")

        await analyze_and_report()

        start_scheduler()
        logger.info("Scheduler started")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ: {e}")
        traceback.print_exc(file=sys.stdout)

# ‚úÖ Telegram Webhook
@app.post(f"/webhook/{BOT_TOKEN}")
async def telegram_webhook(req: Request):
    try:
        update = await req.json()
        await telegram_app.update(update)
        return {"status": "ok"}
    except Exception as e:
        logger.error(f"Webhook error: {e}")
        return {"status": "error", "message": str(e)}

# ‚úÖ –ö–æ—Ä–Ω–µ–≤–æ–π —Ä–æ—É—Ç
@app.get("/")
def read_root():
    return {"status": "Galilei bot running"}
